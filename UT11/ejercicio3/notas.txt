
En este ejemplo estamos usando Files.newBufferedReader(...), para hacer la lectura del dichero. 


Sin embargo, si en lugar de BufferedReader usaras Files.readAllLines(), entonces habría diferencias importantes:
1.  Uso de Memoria:

Files.readAllLines() carga todo el archivo en memoria como una List<String>, lo que puede ser problemático para archivos grandes.

BufferedReader lee el archivo línea por línea, utilizando menos memoria.

2. Velocidad:

Para archivos pequeños, Files.readAllLines() puede ser más rápido porque usa menos operaciones de E/S.

Para archivos grandes, BufferedReader es mejor porque evita la sobrecarga de cargar todo el contenido en memoria.
3.  Mejoras usando otras funcionalidades (Streams) - Paralelismo:

Files.lines(Paths.get("archivo.csv")) devuelve un Stream<String>, lo que permite procesamiento paralelo y operaciones funcionales (como filter, map, forEach).

BufferedReader es más adecuado para lectura secuencial.

Puesto que aún no hemos visto Streams, el uso de  Files.newBufferedReader(...) mantiene la eficiencia de BufferedReader (de IO) pero con la API moderna de java.nio.file