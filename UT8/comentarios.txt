En Java, ArrayList es una implementaciÃ³n de la interfaz List, lo que significa que hereda su comportamiento y debe implementar sus mÃ©todos.

1. JerarquÃ­a de ArrayList
La estructura de herencia de ArrayList es la siguiente:

ğŸ“Œ ArrayList<E> extiende de AbstractList<E>, que a su vez implementa la interfaz List<E>.

ğŸ“Œ List<E> es una subinterfaz de Collection<E>, que a su vez extiende Iterable<E>.


Iterable<E>
   â””â”€â”€ Collection<E>
         â””â”€â”€ List<E>
               â”œâ”€â”€ AbstractList<E>
               â”‚     â””â”€â”€ ArrayList<E>
               â”œâ”€â”€ LinkedList<E>
               â”œâ”€â”€ Vector<E>
               â””â”€â”€ Stack<E>
Esto significa que ArrayList hereda mÃ©todos de todas estas interfaces y clases abstractas.

Como ArrayList implementa la interfaz List, estÃ¡ obligado a definir varios mÃ©todos, como:

add(E e), remove(Object o), get(int index), set(int index, E element), size(), etc.


## Uso de Comparable en Java

La interfaz Comparable<T> en Java se usa para definir un orden natural entre los objetos de una clase. 

Permite que los objetos de esa clase puedan ser comparados entre sÃ­, lo que facilita la ordenaciÃ³n en estructuras como ArrayList, TreeSet, TreeMap, etc.

El mÃ©todo compareTo(T otro) debe devolver:
Un nÃºmero negativo si this es menor que otro.
Cero (0) si son iguales.
Un nÃºmero positivo si this es mayor que otro.

ğŸ“Œ Comparable<T>:
Se implementa en la clase que queremos ordenar.
Define un Ãºnico criterio de ordenaciÃ³n (el "orden natural").
Se usa con Collections.sort() y Arrays.sort().
